#lang pyramid

(require psl "arith.pmd")
(require psl "syntax.pmd")

(defmacro (__builtin_set_test_result n)
  (match n
    [`(%-unbox ,x) `(set-test-result! ,x)]
    [_ (error "__builtin_set_test_result: Unknown case" n)]
    ))

(defmacro (%c-define-word-assign-unop assign-op base-op)
  `(defmacro (,assign-op x)
     `(%c-word-write! ,x (,,base-op ,x))))

(defmacro (%c-define-word-assign-binop assign-op base-op)
  `(defmacro (,assign-op x y)
     `(%c-word-write! ,x (,,base-op ,x ,y))))

; Unary operators

(%c-define-word-assign-unop %c-word-op-- '%c-word-op-1)
(%c-define-word-assign-unop %c-word-op++ '%c-word-op+1)

; Binary operators

(%c-define-word-assign-binop %c-word-op*= '%c-word-op*)
(%c-define-word-assign-binop %c-word-op+= '%c-word-op+)
(%c-define-word-assign-binop %c-word-op-= '%c-word-op-)
(%c-define-word-assign-binop %c-word-op/= '%c-word-op/)
(%c-define-word-assign-binop %c-word-op=  '%c-word-opright)

(defmacro (%c-word-op-1 x)  `(%#-- ,x (%-unbox 1)))
(defmacro (%c-word-op+1 x)  `(%#-+ ,x (%-unbox 1)))
(defmacro (%c-word-opdereference x) `(%c-word-read ,x))
(defmacro (%c-word-op! x)   `(%#-not ,x))
(defmacro (%c-word-op~ x)   `(%#-negate ,x))

(defmacro (%c-word-op&& x y)   `(%#-not (%#-not (%#-and ,x ,y))))
(defmacro (%c-word-op\|\| x y) `(%#-not (%#-not (%#-or ,x ,y))))
(defmacro (%c-word-op& x y)    `(%#-and ,x ,y))
(defmacro (%c-word-op\| x y)   `(%#-or  ,x ,y))
(defmacro (%c-word-op^ x y)    `(%#-xor ,x ,y))

(defmacro (%c-word-op== x y) `(%#-bool->word (%#-=  ,x ,y)))
(defmacro (%c-word-op!= x y) `(%#-bool->word (%#-not (%#-= ,x ,y))))
(defmacro (%c-word-op>= x y) `(%#-bool->word (%#->= ,x ,y)))
(defmacro (%c-word-op> x y)  `(%#-bool->word (%#->  ,x ,y)))
(defmacro (%c-word-op<= x y) `(%#-bool->word (%#-<= ,x ,y)))
(defmacro (%c-word-op< x y)  `(%#-bool->word (%#-<  ,x ,y)))
(defmacro (%c-word-op> x y)  `(%#-bool->word (%#->  ,x ,y)))
(defmacro (%c-word-opraw+ x y) `(%#-+  ,x ,y))
(defmacro (%c-word-opraw- x y) `(%#--  ,x ,y))
(defmacro (%c-word-op* x y)  `(%#-*  ,x ,y))
(defmacro (%c-word-op/ x y)  `(%#-u/ ,x ,y))
(defmacro (%c-word-op% x y)  `(%#-u% ,x ,y))
(defmacro (%c-word-op>> x y) `(%#-bitshiftr ,x ,y))
(defmacro (%c-word-op<< x y) `(%#-bitshiftl ,x ,y))

; Other utilities

(defmacro (%c-loop-forever body)
  `((Î» ()
      (define (loop) ,body (loop))
      (loop))))

(defmacro (%c-allocate-fixnum)
  `(%#-mem-alloc (%-unbox WORD)))

(defmacro (%c-allocate-struct size)
  `(%#-mem-alloc (%-unbox ,size)))

(defmacro (%c-struct-field ptr os size)
  `(%#-+ ,ptr ,os))

(defmacro (%c-word-read ptr)
  `(%#-mem-read ,ptr (%-unbox 0)))

(defmacro (%c-word-write! ptr val)
  `(%#-mem-write! ,ptr (%-unbox 0) ,val))
(defmacro (%c-word-opright x y) y)

(defmacro (%c-noinline var) `(set! ,var ,var))

(defmacro (%c-define-arg name init)
  `(begin (define ,name (%c-allocate-fixnum))
          (%c-noinline ,name)
          (%c-word-write! ,name ,init)))

(defmacro (%c-struct-copy size from to)
  `(%#-memcpy ,to ,from ,size))

(defmacro (%c-define-fixnum name init)
  `(begin (define ,name (let ([ ptr (%c-allocate-fixnum) ])
                          (%c-word-write! ptr ,init)
                          ptr))
          (%c-noinline ,name)))

(defmacro (%c-define-struct name init)
  `(begin (define ,name ,init)
          (%c-noinline ,name)))

(defmacro (%c-define-pointer name init)
  `(begin (%c-define-fixnum ,name ,init)
          (%c-noinline ,name)))

(defmacro (%c-define-union name init)
  `(begin (define ,name ,init)
          (%c-noinline ,name)))

(defmacro (%c-case e . xs)
  `(%#-case ,e ,@xs))
